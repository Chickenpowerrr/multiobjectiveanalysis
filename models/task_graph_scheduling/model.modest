impatient action p1_add;
impatient action p1_done;
impatient action p1_mult;
impatient action p2_add;
impatient action p2_done;
impatient action p2_mult;
impatient action time;

const int K;

transient real time = 0;
transient real energy = 0;
int(0..3) task6 = 0;
int(0..3) p1 = 0;
int(0..3) p2 = 0;

const real UNKNOWN;
property "Achievability0" = multi(Xe(S(time), true) <= UNKNOWN, Xe(S(energy), true) <= 1.45);
property "Numerical0" = multi(Xmin(S(time), true), Xe(S(energy), true) <= 1.45);

process scheduler()
{
   int(0..3) task1 = 0;
   int(0..3) task2 = 0;
   int(0..3) task3 = 0;
   int(0..3) task4 = 0;
   int(0..3) task5 = 0;
   
   process l()
   {
      alt {
      :: when(task1 == 0) p1_add {= task1 = 1 =};
         l()
      :: when(task4 == 0 && task1 == 3 && task2 == 3) p1_add {= task4 = 1 =};
         l()
      :: when(task6 == 0 && task4 == 3 && task5 == 3) p1_add {= task6 = 1 =};
         l()
      :: when(task6 == 1) p1_done {= task6 = 3 =};
         l()
      :: when(task1 == 1) p1_done {= task1 = 3 =};
         l()
      :: when(task2 == 1) p1_done {= task2 = 3 =};
         l()
      :: when(task3 == 1) p1_done {= task3 = 3 =};
         l()
      :: when(task4 == 1) p1_done {= task4 = 3 =};
         l()
      :: when(task5 == 1) p1_done {= task5 = 3 =};
         l()
      :: when(task3 == 0 && task1 == 3) p1_mult {= task3 = 1 =};
         l()
      :: when(task2 == 0) p1_mult {= task2 = 1 =};
         l()
      :: when(task5 == 0 && task3 == 3) p1_mult {= task5 = 1 =};
         l()
      :: when(task1 == 0) p2_add {= task1 = 2 =};
         l()
      :: when(task4 == 0 && task1 == 3 && task2 == 3) p2_add {= task4 = 2 =};
         l()
      :: when(task6 == 0 && task4 == 3 && task5 == 3) p2_add {= task6 = 2 =};
         l()
      :: when(task1 == 2) p2_done {= task1 = 3 =};
         l()
      :: when(task2 == 2) p2_done {= task2 = 3 =};
         l()
      :: when(task3 == 2) p2_done {= task3 = 3 =};
         l()
      :: when(task4 == 2) p2_done {= task4 = 3 =};
         l()
      :: when(task5 == 2) p2_done {= task5 = 3 =};
         l()
      :: when(task6 == 2) p2_done {= task6 = 3 =};
         l()
      :: when(task2 == 0) p2_mult {= task2 = 2 =};
         l()
      :: when(task3 == 0 && task1 == 3) p2_mult {= task3 = 2 =};
         l()
      :: when(task5 == 0 && task3 == 3) p2_mult {= task5 = 2 =};
         l()
      :: time {= time = 1 / K, energy = ((p2 > 0 ? 30 / (1000 * K) : 0)) + ((p1 > 0 ? 90 / (1000 * K) : 0)) + ((p2 == 0 ? 20 / (1000 * K) : 0)) + ((p1 == 0 ? 10 / (1000 * K) : 0)) =};
         l()
      }
   }

   l()
}

process P1()
{
   int(0..2) c1 = 0;
   int(0..4 * K + 1) x1 = 0;
   
   process l()
   {
      alt {
      :: when(p1 == 1 && x1 == 1 * K && c1 == 0) palt {
         :1 / 3: {= p1 = 3, c1 = 0, x1 = 0 =}; 
            l()
         :2 / 3: {= c1 = 1, x1 = 0 =}; 
            l()
         }
      :: when(p1 == 1 && x1 == 1 * K && c1 == 1) palt {
         :1 / 2: {= p1 = 3, c1 = 0, x1 = 0 =}; 
            l()
         :1 / 2: {= c1 = 2, x1 = 0 =}; 
            l()
         }
      :: when(p1 == 2 && x1 == 2 * K && c1 == 0) palt {
         :1 / 3: {= p1 = 3, c1 = 0, x1 = 0 =}; 
            l()
         :2 / 3: {= c1 = 1, x1 = 0 =}; 
            l()
         }
      :: when(p1 == 2 && x1 == 1 * K && c1 == 1) palt {
         :1 / 2: {= p1 = 3, c1 = 0, x1 = 0 =}; 
            l()
         :1 / 2: {= c1 = 2, x1 = 0 =}; 
            l()
         }
      :: when(p1 == 0) p1_add {= p1 = 1, x1 = 0 =};
         l()
      :: when(p1 == 1 && x1 == 1 * K && c1 == 2) p1_done {= p1 = 0, c1 = 0, x1 = 0 =};
         l()
      :: when(p1 == 2 && x1 == 1 * K && c1 == 2) p1_done {= p1 = 0, c1 = 0, x1 = 0 =};
         l()
      :: when(p1 == 3) p1_done {= p1 = 0 =};
         l()
      :: when(p1 == 0) p1_mult {= p1 = 2, x1 = 0 =};
         l()
      :: when((!(p1 == 3) || x1 + 1 <= 0) && (!(p1 == 2 && c1 == 0) || x1 + 1 <= 2 * K) && (!(p1 == 2 && c1 > 0) || x1 + 1 <= 1 * K) && (!(p1 == 1) || x1 + 1 <= 1 * K)) time {= x1 = min(x1 + 1, 4 * K + 1) =};
         l()
      }
   }

   l()
}

process P2()
{
   int(0..2) c2 = 0;
   int(0..6 * K + 1) x2 = 0;
   
   process l()
   {
      alt {
      :: when(p2 == 1 && x2 == 4 * K && c2 == 0) palt {
         :1 / 3: {= p2 = 3, c2 = 0, x2 = 0 =}; 
            l()
         :2 / 3: {= c2 = 1, x2 = 0 =}; 
            l()
         }
      :: when(p2 == 1 && x2 == 1 && c2 == 1) palt {
         :1 / 2: {= p2 = 3, c2 = 0, x2 = 0 =}; 
            l()
         :1 / 2: {= c2 = 2, x2 = 0 =}; 
            l()
         }
      :: when(p2 == 2 && x2 == 6 * K && c2 == 0) palt {
         :1 / 3: {= p2 = 3, c2 = 0, x2 = 0 =}; 
            l()
         :2 / 3: {= c2 = 1, x2 = 0 =}; 
            l()
         }
      :: when(p2 == 2 && x2 == 1 && c2 == 1) palt {
         :1 / 2: {= p2 = 3, c2 = 0, x2 = 0 =}; 
            l()
         :1 / 2: {= c2 = 2, x2 = 0 =}; 
            l()
         }
      :: when(p2 == 0) p2_add {= p2 = 1, x2 = 0 =};
         l()
      :: when(p2 == 1 && x2 == 1 && c2 == 2) p2_done {= p2 = 0, c2 = 0, x2 = 0 =};
         l()
      :: when(p2 == 2 && x2 == 1 && c2 == 2) p2_done {= p2 = 0, c2 = 0, x2 = 0 =};
         l()
      :: when(p2 == 3) p2_done {= p2 = 0 =};
         l()
      :: when(p2 == 0) p2_mult {= p2 = 2, x2 = 0 =};
         l()
      :: when((!(p2 == 3) || x2 + 1 <= 0) && (!(p2 == 1 && c2 > 0) || x2 + 1 <= 1) && (!(p2 == 2 && c2 == 0) || x2 + 1 <= 6 * K) && (!(p2 == 2 && c2 > 0) || x2 + 1 <= 1) && (!(p2 == 1 && c2 == 0) || x2 + 1 <= 4 * K)) time {= x2 = min(x2 + 1, 6 * K + 1) =};
         l()
      }
   }

   l()
}

par {
 p1_add, p1_done, p1_mult, p2_add, p2_done, p2_mult, time } {
:p1_add, p1_done, p1_mult, p2_add, p2_done, p2_mult, time: scheduler()
:p1_add, p1_done, p1_mult, -, -, -, time: P1()
:-, -, -, p2_add, p2_done, p2_mult, time: P2()
}